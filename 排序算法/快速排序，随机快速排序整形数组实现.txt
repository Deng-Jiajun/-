#include<iostream>
#include<random>
#include<ctime>
void swap(int& lhd, int& rhd)
{
	int tmp = lhd;
	lhd = rhd;
	rhd = tmp;
}
int Partition(int *A, int p, int r)
{
	int x = A[r];
	int i = p - 1;
	for (int j = p; j != r; ++j)
	{
		if (A[j] <= x)
		{
			++i;
			swap(A[i], A[j]);
		}
	}
	swap(A[i + 1], A[r]);
	return i + 1;
}
void QuickSort(int* A, int p, int r)
{
	if (p < r)
	{
		int q = Partition(A, p, r);
		QuickSort(A, p, q - 1);
		QuickSort(A, q + 1, r);
	}
}

const unsigned Random(const unsigned &a, const unsigned &b)
{
	std::uniform_int_distribution<unsigned> u(a, b);
	static std::default_random_engine e(time(0));
	return u(e);
}

int RandomizedPartition(int *A, int p, int r)
{
	int i = Random(p, r);
	swap(A[r], A[i]);

	return Partition(A, p, r);
}

void RandomizedQuickSort(int* A, int p, int r)
{
	if (p < r)
	{
		int q = RandomizedPartition(A, p, r);
		RandomizedQuickSort(A, p, q - 1);
		RandomizedQuickSort(A, q + 1, r);
	}
}
int main(void)
{
	std::cout << "quick sort.";
	int A[10] = { 1,3,5,8,2,9,0,4,7,6 };
	//QuickSort(A, 0, sizeof(A)/sizeof(A[0])-1);

	RandomizedQuickSort(A, 0, sizeof(A)/sizeof(A[0])-1);
	for (auto &i : A)
		std::cout << i << ' ';

	system("pause");
	return 0;
}